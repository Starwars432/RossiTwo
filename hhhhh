import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface CrystalHeroDesignProps {
  isVisible: boolean;
  onClose?: () => void;
}

const CrystalHeroDesign: React.FC<CrystalHeroDesignProps> = ({ isVisible, onClose }) => {
  const [animationPhase, setAnimationPhase] = useState<'assembling' | 'complete' | 'disassembling'>('assembling');

  useEffect(() => {
    if (isVisible) {
      setAnimationPhase('assembling');
      
      // Auto-cycle through phases
      const timer1 = setTimeout(() => setAnimationPhase('complete'), 2000);
      const timer2 = setTimeout(() => setAnimationPhase('disassembling'), 4000);
      const timer3 = setTimeout(() => setAnimationPhase('assembling'), 6000);
      
      return () => {
        clearTimeout(timer1);
        clearTimeout(timer2);
        clearTimeout(timer3);
      };
    }
  }, [isVisible]);

  const glassPanel = {
    initial: { 
      opacity: 0, 
      scale: 0.8, 
      rotateY: 45,
      x: 100,
      y: -50
    },
    assembling: { 
      opacity: 0.9, 
      scale: 1, 
      rotateY: 0,
      x: 0,
      y: 0,
      transition: { 
        duration: 1.2, 
        ease: [0.25, 0.46, 0.45, 0.94],
        type: "spring",
        stiffness: 100
      }
    },
    complete: { 
      opacity: 1, 
      scale: 1, 
      rotateY: 0,
      x: 0,
      y: 0,
      transition: { duration: 0.5 }
    },
    disassembling: { 
      opacity: 0.3, 
      scale: 0.9, 
      rotateY: -30,
      x: -80,
      y: 40,
      transition: { 
        duration: 1, 
        ease: "easeInOut" 
      }
    }
  };

  const glowEffect = {
    initial: { opacity: 0 },
    assembling: { 
      opacity: [0, 0.8, 0.4],
      transition: { 
        duration: 1.5,
        times: [0, 0.5, 1],
        repeat: Infinity,
        repeatType: "reverse" as const
      }
    },
    complete: { 
      opacity: 0.6,
      transition: { duration: 0.3 }
    },
    disassembling: { 
      opacity: [0.6, 1, 0],
      transition: { duration: 1 }
    }
  };

  if (!isVisible) return null;

  return (
    <div className="absolute inset-0 bg-transparent flex items-center justify-center overflow-hidden">
      {/* Background Crystalline Effect */}
      <motion.div
        className="absolute inset-0"
        style={{
          background: 'radial-gradient(circle at center, rgba(0, 240, 255, 0.1) 0%, transparent 70%)'
        }}
        animate={{
          scale: animationPhase === 'complete' ? [1, 1.1, 1] : 1,
          opacity: animationPhase === 'complete' ? [0.3, 0.6, 0.3] : 0.2
        }}
        transition={{
          duration: 2,
          repeat: animationPhase === 'complete' ? Infinity : 0,
          ease: "easeInOut"
        }}
      />

      {/* Glass Panel Grid - 5 Panels */}
      <div className="relative w-full h-full flex items-center justify-center">
        {/* Center Panel */}
        <motion.div
          className="absolute w-32 h-20 rounded-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(0, 240, 255, 0.2) 0%, rgba(96, 165, 250, 0.1) 100%)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(0, 240, 255, 0.3)',
            boxShadow: '0 0 20px rgba(0, 240, 255, 0.2), inset 0 0 20px rgba(255, 255, 255, 0.1)'
          }}
          variants={glassPanel}
          initial="initial"
          animate={animationPhase}
        >
          {/* Inner Glow */}
          <motion.div
            className="absolute inset-1 rounded-lg"
            style={{
              background: 'linear-gradient(45deg, rgba(0, 240, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%)',
              border: '1px solid rgba(0, 240, 255, 0.2)'
            }}
            variants={glowEffect}
            initial="initial"
            animate={animationPhase}
          />
        </motion.div>

        {/* Top Left Panel */}
        <motion.div
          className="absolute w-24 h-16 rounded-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(0, 240, 255, 0.15) 0%, rgba(96, 165, 250, 0.08) 100%)',
            backdropFilter: 'blur(8px)',
            border: '1px solid rgba(0, 240, 255, 0.25)',
            boxShadow: '0 0 15px rgba(0, 240, 255, 0.15)',
            top: '20%',
            left: '25%'
          }}
          variants={{
            ...glassPanel,
            initial: { ...glassPanel.initial, x: -120, y: -80 }
          }}
          initial="initial"
          animate={animationPhase}
        >
          <motion.div
            className="absolute inset-1 rounded-lg"
            style={{
              background: 'rgba(0, 240, 255, 0.08)',
              border: '1px solid rgba(0, 240, 255, 0.15)'
            }}
            variants={glowEffect}
            initial="initial"
            animate={animationPhase}
          />
        </motion.div>

        {/* Top Right Panel */}
        <motion.div
          className="absolute w-28 h-18 rounded-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(0, 240, 255, 0.18) 0%, rgba(96, 165, 250, 0.1) 100%)',
            backdropFilter: 'blur(12px)',
            border: '1px solid rgba(0, 240, 255, 0.3)',
            boxShadow: '0 0 18px rgba(0, 240, 255, 0.18)',
            top: '15%',
            right: '20%'
          }}
          variants={{
            ...glassPanel,
            initial: { ...glassPanel.initial, x: 140, y: -90 }
          }}
          initial="initial"
          animate={animationPhase}
        >
          <motion.div
            className="absolute inset-1 rounded-lg"
            style={{
              background: 'rgba(0, 240, 255, 0.1)',
              border: '1px solid rgba(0, 240, 255, 0.2)'
            }}
            variants={glowEffect}
            initial="initial"
            animate={animationPhase}
          />
        </motion.div>

        {/* Bottom Left Panel */}
        <motion.div
          className="absolute w-26 h-14 rounded-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(0, 240, 255, 0.12) 0%, rgba(96, 165, 250, 0.06) 100%)',
            backdropFilter: 'blur(6px)',
            border: '1px solid rgba(0, 240, 255, 0.2)',
            boxShadow: '0 0 12px rgba(0, 240, 255, 0.12)',
            bottom: '25%',
            left: '30%'
          }}
          variants={{
            ...glassPanel,
            initial: { ...glassPanel.initial, x: -100, y: 70 }
          }}
          initial="initial"
          animate={animationPhase}
        >
          <motion.div
            className="absolute inset-1 rounded-lg"
            style={{
              background: 'rgba(0, 240, 255, 0.06)',
              border: '1px solid rgba(0, 240, 255, 0.1)'
            }}
            variants={glowEffect}
            initial="initial"
            animate={animationPhase}
          />
        </motion.div>

        {/* Bottom Right Panel */}
        <motion.div
          className="absolute w-30 h-16 rounded-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(0, 240, 255, 0.16) 0%, rgba(96, 165, 250, 0.08) 100%)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(0, 240, 255, 0.25)',
            boxShadow: '0 0 16px rgba(0, 240, 255, 0.16)',
            bottom: '20%',
            right: '25%'
          }}
          variants={{
            ...glassPanel,
            initial: { ...glassPanel.initial, x: 110, y: 85 }
          }}
          initial="initial"
          animate={animationPhase}
        >
          <motion.div
            className="absolute inset-1 rounded-lg"
            style={{
              background: 'rgba(0, 240, 255, 0.08)',
              border: '1px solid rgba(0, 240, 255, 0.15)'
            }}
            variants={glowEffect}
            initial="initial"
            animate={animationPhase}
          />
        </motion.div>

        {/* Connection Lines */}
        <AnimatePresence>
          {animationPhase === 'complete' && (
            <>
              {/* Horizontal line */}
              <motion.div
                className="absolute h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent"
                style={{ width: '60%', top: '50%' }}
                initial={{ scaleX: 0, opacity: 0 }}
                animate={{ scaleX: 1, opacity: 0.6 }}
                exit={{ scaleX: 0, opacity: 0 }}
                transition={{ duration: 0.8, delay: 0.5 }}
              />
              
              {/* Vertical line */}
              <motion.div
                className="absolute w-px bg-gradient-to-b from-transparent via-cyan-400 to-transparent"
                style={{ height: '60%', left: '50%' }}
                initial={{ scaleY: 0, opacity: 0 }}
                animate={{ scaleY: 1, opacity: 0.6 }}
                exit={{ scaleY: 0, opacity: 0 }}
                transition={{ duration: 0.8, delay: 0.7 }}
              />
            </>
          )}
        </AnimatePresence>

        {/* Central Pulse Effect */}
        <motion.div
          className="absolute w-2 h-2 rounded-full bg-cyan-400"
          style={{
            boxShadow: '0 0 20px rgba(0, 240, 255, 0.8)'
          }}
          animate={{
            scale: animationPhase === 'complete' ? [1, 1.5, 1] : 1,
            opacity: animationPhase === 'complete' ? [0.8, 1, 0.8] : 0.6
          }}
          transition={{
            duration: 1.5,
            repeat: animationPhase === 'complete' ? Infinity : 0,
            ease: "easeInOut"
          }}
        />

        {/* Floating Particles */}
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 rounded-full bg-cyan-400"
            style={{
              left: `${30 + Math.random() * 40}%`,
              top: `${30 + Math.random() * 40}%`,
            }}
            animate={{
              y: [0, -20, 0],
              opacity: [0.3, 0.8, 0.3],
              scale: [0.5, 1, 0.5]
            }}
            transition={{
              duration: 2 + Math.random() * 2,
              repeat: Infinity,
              delay: Math.random() * 2,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>

      {/* Phase Indicator */}
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
        <motion.div
          className="text-xs text-cyan-400 font-mono uppercase tracking-wider"
          animate={{ opacity: [0.5, 1, 0.5] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {animationPhase === 'assembling' && 'CRYSTALLIZING...'}
          {animationPhase === 'complete' && 'CRYSTAL MATRIX ACTIVE'}
          {animationPhase === 'disassembling' && 'RECONFIGURING...'}
        </motion.div>
      </div>
    </div>
  );
};

export default CrystalHeroDesign;
